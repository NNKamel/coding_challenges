#!markdown

# util functions

#!csharp

using Newtonsoft.Json;
public static string ToPrettyString(this object value)
{
    return JsonConvert.SerializeObject(value, Formatting.Indented);
}

public static T Dump<T>(this T value, string name)
{
    Console.WriteLine($"== {name} ==");
    Console.WriteLine(value.ToPrettyString()+"\n== ==");
    return value;
}	

#!csharp

void print(string s) {
	Console.WriteLine(s);
}

void d(object b, string s = "") {
	b.Dump(s);
}

void writeArr(IEnumerable<int> arr, string name)
{
	var size = arr.Count();
	string s = "";
	s+=$"{name}: \n| ";
	for(int i = 0; i < size; i++) {
		s+=$"{i} | ";
	}
	s+=$"\n| ";
	foreach(var ele in arr) {
		s+=$"{ele} | ";
	}
	// s+="\n";
	Console.WriteLine(s);
}

#!markdown

# 152. Maximum Product Subarray
https://leetcode.com/problems/maximum-product-subarray/

Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

#!csharp

var arr = new int[]{2,3,-2,4};
writeArr(arr, "1");
//int k = 100;
//print($"k: {k}");
int res = MaxProduct2(arr);
res.Dump("result1 - 6");

print("&&&&&&&&&&&&&&&&&-----------------------------&&&&&&&&&&&&&&&&&&&");

arr = new int[]{-2,0,-1};
writeArr(arr, "2");
//k = 19;
res = MaxProduct2(arr);
res.Dump("result2 - 0");

print("&&&&&&&&&&&&&&&&&-----------------------------&&&&&&&&&&&&&&&&&&&");

arr = new int[]{0, 2};
writeArr(arr, "2");
//k = 19;
res = MaxProduct2(arr);
res.Dump("result2 - 0");

int MaxProduct2(int [] arr) {
	int size =  arr.Length;
	int result = arr[0];
	int max = result;
	int min = result;
	
	for (int i = 1; i < size; i++) {
		print($"arr[{i}] = {arr[i]} | min = {min} | max = {max} | result = {result}");
		if (arr[i] < 0) {
			print("swapping");
			int temp = min;
			min = max;
			max = temp;
			print($"min = {min} | max = {max}");
		}
		
		max = getMax(arr[i], max*arr[i]);
		min = getMin(arr[i], min*arr[i]);
		result = getMax(max, result);
		print($"prod~ min = {min} | max = {max} | result = {result}");
	}
	
	return result;
}

int getMax(int n1, int n2) {
	if (n1 > n2) return n1;
	return n2;
}

int getMin(int n1, int n2) {
	if (n1 < n2) return n1;
	return n2;
}

int MaxProduct(int[] arr) {
    var size = arr.Length;
    var maxProd = arr[0];
    var runningProd = 1;
    
    for (int i = 0, j = 0; i < size; i++) {
        if (arr[i] == 0) {
            if (maxProd < 0) maxProd = 0;
            j = i + 1;
            runningProd = 1;
            continue;
        }
	
        runningProd *= arr[i];
        
        while (j<=i && maxProd > runningProd) {
			print($"runningProdb: {runningProd} | iarr[{i}] = {arr[i]} | jarr[{j}] = {arr[j]}");
            runningProd /= arr[j++];
			print($"runningProda: {runningProd}");
        }
        
        if (maxProd < runningProd) maxProd = runningProd;
    }
    
    return maxProd;
}

// get size
// define max = 1
// define min = 1
// loop on array
// 		if (arr[i] < 0) 
// 			swap(min, max)
//		max = max(max * arr[i], arr[i])
//		min = min(min * arr[i], arr[i])
// return max;

#!markdown

# 523. Continuous Subarray Sum (unsolved)
https://leetcode.com/problems/continuous-subarray-sum/

Given an integer array nums and an integer k, return true if nums has a continuous subarray of size at least two whose elements sum up to a multiple of k, or false otherwise.

An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.

 

Example 1:

Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.
Example 2:

Input: nums = [23,2,6,4,7], k = 6
Output: true
Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.
42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.
Example 3:

Input: nums = [23,2,6,4,7], k = 13
Output: false
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109
0 <= sum(nums[i]) <= 231 - 1
1 <= k <= 231 - 1

#!csharp

var arr = new int[]{23,2,2,2,7};
writeArr(arr, "1");
int k = 6;
print($"k: {k}");
bool res = CheckSubarraySum(arr, k);
res.Dump("result1 - true");

print("&&&&&&&&&&&&&&&&&-----------------------------&&&&&&&&&&&&&&&&&&&");

arr = new int[]{23,2,6,4,7};
writeArr(arr, "2");
k = 13;
res = CheckSubarraySum(arr, k);
res.Dump("result2 - false");

print("&&&&&&&&&&&&&&&&&-----------------------------&&&&&&&&&&&&&&&&&&&");

arr = new int[]{1, 0};
writeArr(arr, "2");
k = 2;
res = CheckSubarraySum(arr, k);
res.Dump("result2 - false");

print("&&&&&&&&&&&&&&&&&-----------------------------&&&&&&&&&&&&&&&&&&&");

arr = new int[]{5, 0, 0, 0, 0};
writeArr(arr, "2");
k = 3;
res = CheckSubarraySum(arr, k);
res.Dump("result2 - true");

bool CheckSubarraySum(int[] arr, int k) {
    var size = arr.Length;
    var sumHistoryPos = new Dictionary<int, int>(); // 0 is count, 1 is pos
    var cumulativeSum = 0;
    
//    var cumSumArr = new int [size];
//    cumSumArr[0] = arr[0];
//        
//    for (int i = 1; i<size; i++) {
//        cumSumArr[i] += cumSumArr[i-1] + cumSumArr[i];
//    }

	sumHistoryPos[0] = 0;
    
    for (int i = 0; i<size; i++) {
        cumulativeSum += arr[i];
        if (isGood(k, i, cumulativeSum, arr[i], sumHistoryPos))
            return true;
        sumHistoryPos[cumulativeSum] = i;
    }
    
    return false;
    
}

bool isGood(int k, int pos, int cumulativeSum, int value, Dictionary<int, int> sumHistoryPos) {
	print($"===  i: {pos} | arr[{pos}]: {value} | cumulativeSum: {cumulativeSum} ====");
	d(sumHistoryPos, "sumHistoryPos");
    foreach (var kp in sumHistoryPos) {
        var csum = kp.Key;
        var lastItemPos = kp.Value;
		
		var sumDiff = cumulativeSum - csum;
		var posDiff = pos - lastItemPos;
		
		d(kp, "checking kp");
		print($"csum: {csum} | lastItemPos: {lastItemPos}");
		print($"sumDiff: {sumDiff}");
		print($"posDiff: {posDiff}");
        
        if (sumDiff > 0 && sumDiff % k == 0 && pos - lastItemPos > 0) {
			print($"found!!!");
            return true;
        }
		
		print($"not found");
    }
	print("-----------------------------");
    return false;
}

#!markdown

# 560. Subarray Sum Equals K
https://leetcode.com/problems/subarray-sum-equals-k/

Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 10^4
-1000 <= nums[i] <= 1000
-10^7 <= k <= 10^7

#!csharp

var arr = new int[]{1, -1, 0};
writeArr(arr, "1");
int k = 0;
int res = getNumberOfSubArraySumKExplicit(arr, k);
res.Dump("result1 - 3");

print("-----------------------------");
arr = new int[]{0, 0};
writeArr(arr, "2");
k = 0;
res = getNumberOfSubArraySumKExplicit(arr, k);
res.Dump("result2 - 3");

// solving for sumUntil[j];
// sumUntil[i] - sumUntil[j] = k -- where i > j
// substitution:
// sumUntil[i] - k = sumUntil[j]

// loop on our array, calculate the cumulativesum and save it in a count Arr of the cumulative 
// if sumUntil[j] exists where sumUntil[i] - k = sumUntil[j], add that to our found results


int getNumberOfSubArraySumK(int [] arr, int k) {
	var size = arr.Length;
	var sumHistoryCount = new Dictionary<int, int>();
	var cumulativeSum = 0;
	var subArraysFound = 0;

	sumHistoryCount[0] = 1;
	
	for (int i = 0; i < size; i++) {
		cumulativeSum += arr[i];
		
		var sumUntilJ = cumulativeSum - k;
		
		print($"i = {i} | arr[{i}] = {arr[i]} \ncumulativeSum: {cumulativeSum} | sumUntilJ: {sumUntilJ}");
		sumHistoryCount.Dump("sumHistoryCount");
		
		subArraysFound += sumHistoryCount.GetValueOrDefault(sumUntilJ, 0);
		
		sumHistoryCount[cumulativeSum] = sumHistoryCount.GetValueOrDefault(cumulativeSum, 0) + 1;
	}
	
	return subArraysFound;
}

int getNumberOfSubArraySumKExplicit(int [] arr, int k) {
	var size = arr.Length;
	var sumHistoryCount = new Dictionary<int, int>();
	var cumulativeSum = 0;
	var subArraysFound = 0;

	sumHistoryCount[0] = 1;
	
	for (int i = 0; i < size; i++) {
		cumulativeSum += arr[i];
		
		var sumUntilJ = cumulativeSum - k;
		
		print($"i = {i} | arr[{i}] = {arr[i]} \ncumulativeSum: {cumulativeSum} | sumUntilJ: {sumUntilJ}");
		sumHistoryCount.Dump("sumHistoryCount");
		
		// this part is done using hashing using the dictionary keys so it's o[1]
		foreach(var kp in sumHistoryCount) {
			var csum = kp.Key;
			var count = kp.Value;
			
			//if (cumulativeSum - csum == k) {
			//	subArraysFound += count;
			//}
			
			if (cumulativeSum - k == csum) {
				subArraysFound += count;
			}
		}
		
		//subArraysFound += sumHistoryCount.GetValueOrDefault(sumUntilJ, 0);
		
		sumHistoryCount[cumulativeSum] = sumHistoryCount.GetValueOrDefault(cumulativeSum, 0) + 1;
	}
	
	return subArraysFound;
}

#!markdown

# 713. Subarray Product Less Than K
https://leetcode.com/problems/subarray-product-less-than-k/

Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.

 

Example 1:

Input: nums = [10,5,2,6], k = 100
Output: 8
Explanation: The 8 subarrays that have product less than 100 are:
[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]
Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.
Example 2:

Input: nums = [1,2,3], k = 0
Output: 0
 

Constraints:

1 <= nums.length <= 3 * 104
1 <= nums[i] <= 1000
0 <= k <= 106

#!csharp

var arr = new int[]{10,5,2,6};
writeArr(arr, "1");
int k = 100;
print($"k: {k}");
int res = NumSubarrayProductLessThanK2(arr, k);
res.Dump("result1 - 8");

print("&&&&&&&&&&&&&&&&&-----------------------------&&&&&&&&&&&&&&&&&&&");

arr = new int[]{10,9,10,4,3,8,3,3,6,2,10,10,9,3};
writeArr(arr, "2");
k = 19;
res = NumSubarrayProductLessThanK2(arr, k);
res.Dump("result2 - 18");

//print("&&&&&&&&&&&&&&&&&-----------------------------&&&&&&&&&&&&&&&&&&&");
//
//arr = new int[]{};
//writeArr(arr, "3");
//k = 9931;
//res = NumSubarrayProductLessThanK2(arr, k);
//res.Dump("result2 - 4370");

print("&&&&&&&&&&&&&&&&&-----------------------------&&&&&&&&&&&&&&&&&&&");

arr = new int[]{10,3,3,7,2,9,7,4,7,2,8,6,5,1,5};
writeArr(arr, "4");
k = 26;
res = NumSubarrayProductLessThanK2(arr, k);
res.Dump("result2 - 0");

print("&&&&&&&&&&&&&&&&&-----------------------------&&&&&&&&&&&&&&&&&&&");

arr = new int[]{1,2,3};
writeArr(arr, "5");
k = 0;
res = NumSubarrayProductLessThanK2(arr, k);
res.Dump("result2 - 0");

print("&&&&&&&&&&&&&&&&&-----------------------------&&&&&&&&&&&&&&&&&&&");

arr = new int[]{57,44,92,28,66,60,37,33,52,38,29,76,8,75,22};
writeArr(arr, "6");
k = 18;
res = NumSubarrayProductLessThanK2(arr, k);
res.Dump("result2 - 1");

int NumSubarrayProductLessThanK(int [] arr, int k) {
	var size = arr.Length;
	double dk = Math.Log(k);
	print($"dk {dk}");
    double runningProduct = 0;
    var productHistoryCount = new Dictionary<double, int>();
    var resultsFound = 0;
    
    for (int i = 0; i < size; i++) {
        runningProduct += Math.Log(arr[i]);
		
		print($"runningProduct: {runningProduct}");
        
        if (runningProduct < dk) {
            resultsFound+=(numOfSubArrays(i+1) - numOfSubArrays(i));
			d(resultsFound, "results1");
        } else {
	        foreach (var kp in productHistoryCount) {
	            var product = kp.Key;
	            var count = kp.Value;
				var productDiff = runningProduct - product;
				print($"keyProduct: {product} | productDiff: {productDiff} | count: {count}");
	            
	            if (runningProduct - product < dk) {
	                resultsFound+=count;
					d(resultsFound, "results");
	            }
	        }
        }
        
        productHistoryCount[runningProduct] = productHistoryCount.GetValueOrDefault(runningProduct, 0) + 1;
    }
    
    return resultsFound;
}

int NumSubarrayProductLessThanK2(int [] arr, int k) {
	var size = arr.Length;
	var runningProd = 1;
	var resultsFound = 0;
	print($"k: {k}");
	for (int i = 0, j = 0; i < size; i++) {
		runningProd *= arr[i];
		//if (arr[i] >= k) continue;
		print($"runningProd: {runningProd} | arr[{i}] = {arr[i]} | arr[{j}] = {arr[j]}");
		while (j<=i && runningProd >= k) {
			runningProd /= arr[j++];
		}
		
		resultsFound += i - j + 1;
		print($"runningProd: {runningProd} | resultsFound += {i} - {j} + 1");
	}
	
	return resultsFound;
}
    
int numOfSubArrays(int n) {
    return n * (n + 1) / 2;
}

#!markdown

# 724. Find Pivot Index
https://leetcode.com/problems/find-pivot-index/

Given an array of integers nums, calculate the pivot index of this array.

The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.

If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.

Return the leftmost pivot index. If no such index exists, return -1.

 

Example 1:

Input: nums = [1,7,3,6,5,6]
Output: 3
Explanation:
The pivot index is 3.
Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Right sum = nums[4] + nums[5] = 5 + 6 = 11
Example 2:

Input: nums = [1,2,3]
Output: -1
Explanation:
There is no index that satisfies the conditions in the problem statement.
Example 3:

Input: nums = [2,1,-1]
Output: 0
Explanation:
The pivot index is 0.
Left sum = 0 (no elements to the left of index 0)
Right sum = nums[1] + nums[2] = 1 + -1 = 0
 

Constraints:

1 <= nums.length <= 104
-1000 <= nums[i] <= 1000

#!csharp

var x = 0;
//var arr1 = new int[]{1,7,3,6,5,6};
//writeArr(arr1, "arr1");
//x = PivotIndex3(arr1);
//x.Dump("pivot1");
//var arr2 = new int[]{-1,-1,-1,-1,-1,0};
//writeArr(arr2, "arr2");
//x = PivotIndex3(arr2);
//x.Dump("pivot2");
//var arr3 = new int[]{-1,-1,0,1,0,-1};
//writeArr(arr2, "arr3");
//x = PivotIndex3(arr3);
//x.Dump("pivot3 e: 4");
//var arr4 = new int[]{-1,-1,0,1,0,-1};
//x = PivotIndex3(arr4);
//x.Dump("pivot4 e: 2");

var arr5 = new int[]{1,7,3,6,5,6};
writeArr(arr5, "arr5");
x = PivotIndex4(arr5);
x.Dump("pivot1");
var arr6 = new int[]{-1,-1,-1,-1,-1,0};
writeArr(arr6, "arr6");
x = PivotIndex4(arr6);
x.Dump("pivot2");
var arr7 = new int[]{-1,-1,0,1,0,-1};
writeArr(arr7, "arr7");
x = PivotIndex4(arr7);
x.Dump("pivot3 e: 4");
var arr8 = new int[]{-1,-1,0,1,0,-1};
x = PivotIndex4(arr8);
x.Dump("pivot4 e: 2");

int PivotIndex3(int[] arr) {
	
	var totalSum = sum(arr);
	print($"totalsum: {totalSum}");
	var sumSoFar = 0;
	
	for(int i = 0; i < arr.Length; i++) {
		print($"arr[{i}] {arr[i]}");
		if (sumSoFar * 2 + arr[i] == totalSum) {
			print($"condition: {sumSoFar} * 2 + arr[{i}] == {totalSum} | {sumSoFar * 2} + {arr[i]} = {sumSoFar * 2 + arr[i]}");
			return i;
		} else {
			print($"sum1 {sumSoFar}");
			sumSoFar += arr[i];
			print($"sum2 {sumSoFar}");
		}
		print("-----------");
	}
	return -1;
}

int PivotIndex4(int [] arr) {
	var left = 0;
	var right = sum(arr);
	print($"right: {right}");
	
	for(int i = 0; i < arr.Length; i++) {
		right -= arr[i];
		if (right == left) {
			print($"found!!!! arr[{i}]: {arr[i]} - left: {left} - right: {right}");
			return i;
		}
		left += arr[i];
		print($"arr[{i}]: {arr[i]} - left: {left} - right: {right}");
	}
	return -1;
}

int sum(int[] arr) {
	var sum = 0;
	foreach(var n in arr) {
		sum+= n;
	}	
	return sum;
}

void print(string s) {
	Console.WriteLine(s);
}

void d(object b, string s = "") {
	b.Dump(s);
}

void writeArr(IEnumerable<int> arr, string name)
{
	var size = arr.Count();
	Console.Write($"{name}: \n| ");
	for(int i = 0; i < size; i++) {
		Console.Write($"{i} | ");
	}
	Console.Write($"\n| ");
	foreach(var ele in arr) {
		Console.Write($"{ele} | ");
	}
	Console.WriteLine("");
}

#!markdown

# 53. Maximum Subarray
https://leetcode.com/problems/maximum-subarray/

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104

#!csharp

int MaxSubArray(int[] arr) {
    int size = arr.Length;
        
    // start with result = 0;
    // sum = 0;
    // 
    // loop on arr
    // 
    // max = max(arr[i] and current max + arr[i])
    //
    // result = max(max, result);
    
    // [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    //  ^
    // max = -2, result = -2
    
    // [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    //      ^
    // 1 <> -2 +1 || 1 <> -1
    // max = 1
    // max = 1, result = 1
    
    // [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    //         ^
    // max = max(-3, 1-3) => -2
    // result = max(-2, 1) => 1
    
    // [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    //             ^
    // max = max(4, 4+-2) => 4
    // result = max(1, 4) => 4
    
    // [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    //                ^
    // max = max(-1, 4-1) => 3
    // result = max(3, 4) => 4
            
    // [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    //                    ^
    // max = max(2, 3+2) => 5
    // result = max(5, 4) => 5
            
    // [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    //                       ^
    // max = max(1, 5+1) => 6
    // result = max(5, 6) => 6
            
    // [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    //                          ^
    // max = max(-5, 6-5) => 1
    // result = max(6, 1) => 6
    
    // ================================
    // start with result = 0;
    // sum = 0;
    // 
    // loop on arr
    // 
    // max = max(arr[i] and current max + arr[i])
    //
    // result = max(max, result);
    
    var result = arr[0];
    var candMax = arr[0];
    
    for (int i = 1; i < size; i++) {
        candMax = Math.Max(arr[i], candMax + arr[i]);
        result = Math.Max(candMax, result);
    }
    return result;
}

#!markdown

# 1. Two Sum
https://leetcode.com/problems/two-sum/

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.

#!csharp

int[] TwoSumMyAnswer(int[] arr, int target) {
    // store every element in a dictionary where value is the array element. key is the remaining number needed to reach the target.
    
    var size = arr.Length;
    var sumDic = new Dictionary<int, int>();
    
    for (int i = 0; i < size; i++) {
        if (sumDic.ContainsKey(arr[i])) {
            return new int[] {sumDic[arr[i]], i};
        } else {
            sumDic[(target-arr[i])] = i;
        }
    }
    
    return new [] {0,0};
}

#!markdown

# 15. 3Sum
https://leetcode.com/problems/3sum/

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105

#!csharp

var arr5 = new int[]{2, 2, -1, -1, -1, 3, -2};
writeArr(arr5, "arr5");
var y = ThreeSumAnswer(arr5);
y.Dump("ThreeSumAnswer");

        List<List<int>> ThreeSumAnswer(int[] arr)
        {
            u.WriteArr(arr, "before");
            StartMergeSort(arr);
            u.WriteArr(arr, "after");

            var resultList = new List<List<int>>();

            int size = arr.Length;
            for (int i = 0; i < size; i++)
            {
                if (i > 0 && arr[i] == arr[i - 1]) continue;

                var left = i + 1;
                var right = size - 1;

                while (left < right)
                {
                    var csum = arr[i] + arr[left] + arr[right];
                    if (csum < 0) left++;
                    else if (csum > 0) right--;
                    else
                    {
                        resultList.Add(new List<int> { arr[i], arr[left], arr[right] });
                        while (left < right && arr[left] == arr[left + 1]) left++;
                        while (left < right && arr[right] == arr[right - 1]) right--;
                        left++; right--;
                    }
                }
            }

            u.d(resultList, "resultList");
            return resultList;
            // sort the array
            // loop on array
            // unnecessary - if number is the same as before, continue 
            // let left = i+1 and right = size - 1
            // while (left < right)
            //      let sum = arr[i] + arr[left] + arr[right]
            //      if (sum > 0) right--;
            //      else if (sum < 0) left++;
            //      else add i, left, right to result list
            //          while (left < right && arr[left] == arr[left+1]) left++
            //          while (left < right && arr[right] == arr[right+1]) right--
            //          left++; right--;


            // [2, 2, -1, -1, -1, 3, -2]
            // [-2, -1, -1, -1, 2, 2, 3]
            //  i   l                 r -- sum = 0
            // [-2, -1, -1, -1, 2, 2, 3]
            //  i   l                 r -- sum = 0
            //  i       l             r -- sum = 0
            //  i            l        r -- sum = 0
            //  i               l  r    -- sum = 2
            //     
        }

        void StartMergeSort(int[] arr)
        {
            MergeSort(arr, 0, arr.Length - 1);
        }

        void MergeSort(int[] arr, int s, int e)
        {
            // s = 3
            // e = 7
            if (s >= e)
            {
                return;
            }
            // u.print($"MergeSort - s: {s} | e: {e}");
            int m = (s + e) / 2;
            // u.print($"MergeSort - m: {m}");
            MergeSort(arr, s, m); // (3,5-1) (3,4)
            MergeSort(arr, m + 1, e);   // (5,7)
            // u.print($"MergeSort - s: {s} | m: {m} | e: {e}");
            Merge(arr, s, m, e);
        }

        void Merge(int[] arr, int s, int m, int e)
        {
            // [0, 2, 5, 6, 7, 2, 3, 4, 7, 8]
            //  0  1  2  3  4  5  6  7  8  9
            // s = 3
            // m = 5
            // e = 7
            // u.print($"s: {s} | m: {m} | e: {e}");
            int s1 = m - s + 1;
            int s2 = e - m;
            // u.print($"s1: {s1}");
            // u.print($"s2: {s2}");
            // s1 = 5-3=2
            // s2 = 7-5+1=3

            int[] arr1 = new int[s1];
            int[] arr2 = new int[s2];

            for (int i = 0; i < s1; i++)
            { // s+s1 = 3+2 = 5
                // u.print($"i: {i} | s: {s} | i + s: {i + s}");
                arr1[i] = arr[i + s];
            }

            for (int i = 0; i < s2; i++)
            { // m+s2 = 5+3 = 8
                arr2[i] = arr[m + i + 1];
            }

            int i1 = 0;
            int i2 = 0;
            int ai = s;
            while (i1 < s1 && i2 < s2)
            {
                if (arr1[i1] < arr2[i2])
                {
                    arr[ai] = arr1[i1];
                    i1++;
                }
                else
                {
                    arr[ai] = arr2[i2];
                    i2++;
                }

                ai++;
            }

            while (i1 < s1)
            {
                arr[ai] = arr1[i1];
                i1++;
                ai++;
            }

            while (i2 < s2)
            {
                arr[ai] = arr2[i2];
                i2++;
                ai++;
            }
        }
    }